#include <iostream>
#include <cmath>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <unistd.h>
#include <dos.h>
#include <windows.h>
using namespace std;
 const int width = 200;
 const int heigth = 50;
 int pixels[width][heigth];
int focalLength = 25;
float degToRad = 360/3.141592;
int s = 10;


class vertex
{
    public:
        float x;
        float y;
        float z;
    vertex(float pos_x,float pos_y,float pos_z)
    {
        x = pos_x;
        y = pos_y;
        z = pos_z;
    }

};

class vector3
{
    public:
        float x;
        float y;
        float z;
    vector3(float pos_x,float pos_y,float pos_z)
    {
        x = pos_x;
        y = pos_y;
        z = pos_z;
    }
};

class vector2
{
    public:
        float x;
        float y;
    vector2(float pos_x,float pos_y)
    {
        x = pos_x;
        y = pos_y;
    }
};


 void draw_line(vector2 v1,vector2 v2)
 {
     float x2 = v2.x+width/2;
     float x1 = v1.x+width/2;
     float y1 = v1.y+heigth/2;
     float y2 = v2.y+heigth/2;
    float x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;
     dx = x2 - x1;
     dy = y2 - y1;
    dx1 = abs(dx);
    dy1 = abs(dy);
    px = 2 * dy1 - dx1;
    py = 2 * dx1 - dy1;
    if (dy1 <= dx1) {
        if (dx >= 0) {
            x = x1; y = y1; xe = x2;
        } else {
            x = x2; y = y2; xe = x1;
        }
        int n = round(x);
        int m = round(y);
        if(pixels[n][m] == 0)
                pixels[n][m] =1;
        for (i = 0; x < xe; i++) {
            x = x + 1;
            if (px < 0) {
                px = px + 2 * dy1;
            } else {
                if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0)) {
                    y = y + 1;
                } else {
                    y = y - 1;
                }
                px = px + 2 * (dy1 - dx1);
            }
            int jk = round(x);
        int kj = round(y);
        if(pixels[jk][kj] == 0)
                pixels[jk][kj] =1;
        }
    } else {
        if (dy >= 0) {
            x = x1; y = y1; ye = y2;
        } else {
            x = x2; y = y2; ye = y1;
        }
        int tr = round(x);
        int rt = round(y);
        if(pixels[tr][rt] == 0)
                pixels[tr][rt] =1;
        for (i = 0; y < ye; i++) {
            y = y + 1;
            if (py <= 0) {
                py = py + 2 * dx1;
            } else {
                if ((dx < 0 && dy<0) || (dx > 0 && dy > 0)) {
                    x = x + 1;
                } else {
                    x = x - 1;
                }
                py = py + 2 * (dx1 - dy1);
            }
           int p = round(x);
        int q = round(y);
        if(pixels[p][q] == 0)
                pixels[p][q] =1;
        }
    }
 }

 vector2 projectVertex(vertex v)
 {
    vector2 projectedPosition((focalLength * v.x)/(focalLength + v.z),(focalLength * v.y)/(focalLength + v.z));
    return projectedPosition;
 }

vertex rotateVertex(vertex v,vector3 rotation)
{
    float rotationX = rotation.x/degToRad;
    float rotationY = rotation.y/degToRad;
    float rotationZ = rotation.z/degToRad;
    float xPrime = (cos(rotationY)*cos(rotationZ)*v.x)+(v.y*sin(rotationX)*sin(rotationY)*cos(rotationZ)-(v.y*cos(rotationX)*sin(rotationZ)) + ((v.z*cos(rotationX)*sin(rotationY)*cos(rotationZ)) + v.z*sin(rotationX)*sin(rotationZ)));
    float yPrime =  (v.x * cos(rotationY) * sin(rotationZ))+(v.y*((sin(rotationX) * sin(rotationY) * sin(rotationZ)) + cos(rotationX) * cos(rotationZ))) + (v.z*((cos(rotationX) * sin(rotationY)*sin(rotationZ))-(sin(rotationX)*cos(rotationZ))));
    float zPrime = (v.x * -1 * sin(rotationY)) + (v.y *(sin(rotationX)*cos(rotationY))) + (v.z*(cos(rotationX) * cos(rotationY)));
    vertex vPrime(xPrime,yPrime,zPrime);
    return vPrime;
}

int main(void)
{
    float pZ = 5;
    float pX = 10;
    float pY = 0;
    vertex v11(0,0,0);
    vertex v21(0,0,0);
    vertex v31(0,0,0);
    vertex v41(0,0,0);
    vertex v51(0,0,0);
    vertex v61(0,0,0);
    vertex v71(0,0,0);
    vertex v81(0,0,0);
    v11=vertex(s,s,s);
    v21=vertex(s,s,-s);
    v31=vertex(s,-s,s);
    v41=vertex(s,-s,-s);
    v51=vertex(-s,s,s);
    v61=vertex(-s,s,-s);
    v71=vertex(-s,-s,s);
    v81=vertex(-s,-s,-s);
    float rX = 0;
    float rY = 0;
    float rZ = 0;
    while(true)
    {
        vector3 pos(pX,pY,pZ);
        for(int i =0;i<heigth;i++)
        {
            for(int j = 0;j<width;j++)
            {
                pixels[j][i]=0;
            }
        }
        vector3 rot(rX,rY,rZ);
        /**for(int i =0;i<heigth;i++)
        {
            for(int j = 0;j<width;j++)
            {
                /**float x= j-width/2;
                float y= i-heigth/2;
                float rotationX = rX/degToRad;
                float rotationY = rY/degToRad;
                float rotationZ = rZ/degToRad;
                int posX=x+pX;
                int posY=y+pY;
                float posRotX=(cos(rotationY)*cos(rotationZ)*posX)+(posY*sin(rotationX)*sin(rotationY)*cos(rotationZ)-(posY*cos(rotationX)*sin(rotationZ)) + ((pZ*cos(rotationX)*sin(rotationY)*cos(rotationZ)) + pZ*sin(rotationX)*sin(rotationZ)));
                float posRotY = (posX * cos(rotationY) * sin(rotationZ))+(posY*((sin(rotationX) * sin(rotationY) * sin(rotationZ)) + cos(rotationX) * cos(rotationZ))) + (pZ*((cos(rotationX) * sin(rotationY)*sin(rotationZ))-(sin(rotationX)*cos(rotationZ))));
                float posRotZ = (posX * -1 * sin(rotationY)) + (posY*(sin(rotationX)*cos(rotationY))) + (pZ*(cos(rotationX) * cos(rotationY)));
                float xProjected = (focalLength * posRotX)/(focalLength + posRotZ);
                float yProjected = (focalLength * posRotY)/(focalLength + posRotZ);**/
        vertex v1 = rotateVertex(v11,rot);
        vertex v2 = rotateVertex(v21,rot);
        vertex v3 = rotateVertex(v31,rot);
        vertex v4 = rotateVertex(v41,rot);
        vertex v5 = rotateVertex(v51,rot);
        vertex v6 = rotateVertex(v61,rot);
        vertex v7 = rotateVertex(v71,rot);
        vertex v8 = rotateVertex(v81,rot);
        draw_line(projectVertex(v1),projectVertex(v2));
        draw_line(projectVertex(v1),projectVertex(v3));
        draw_line(projectVertex(v1),projectVertex(v5));
        draw_line(projectVertex(v2),projectVertex(v6));
        draw_line(projectVertex(v2),projectVertex(v4));
        draw_line(projectVertex(v3),projectVertex(v4));
        draw_line(projectVertex(v3),projectVertex(v7));
        draw_line(projectVertex(v4),projectVertex(v8));
        draw_line(projectVertex(v5),projectVertex(v6));
        draw_line(projectVertex(v5),projectVertex(v7));
        draw_line(projectVertex(v6),projectVertex(v8));
        draw_line(projectVertex(v7),projectVertex(v8));
        for(int i =0;i<heigth;i++)
        {
            for(int j = 0;j<width;j++)
            {
                if(pixels[j][i]==0)
                    cout << " ";
                else
                    cout << "+";
            }
            cout << '\n';
        }
        rY +=  7;
        rX += 7;

        system("CLS");
    }
    return 0;
    /**abs(xProjected)<9&&abs(yProjected)<9&&abs(posRotX)<boundingBox&&abs(posRotY)<boundingBox&&abs(posRotZ)<boundingBox**/
}
